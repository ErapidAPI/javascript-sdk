/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['invoker/ApiClient', 'invoker/model/DataPointNumber', 'invoker/model/DataPointText', 'invoker/model/HistoricalData', 'invoker/model/StandardizedTag'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataPointNumber'), require('../model/DataPointText'), require('../model/HistoricalData'), require('../model/StandardizedTag'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinio) {
      root.intrinio = {};
    }
    root.intrinio.StandardizedTagApi = factory(root.intrinio.ApiClient, root.intrinio.DataPointNumber, root.intrinio.DataPointText, root.intrinio.HistoricalData, root.intrinio.StandardizedTag);
  }
}(this, function(ApiClient, DataPointNumber, DataPointText, HistoricalData, StandardizedTag) {
  'use strict';

  /**
   * StandardizedTag service.
   * @module invoker/api/StandardizedTagApi
   * @version 0.0.1
   */

  /**
   * Constructs a new StandardizedTagApi. 
   * @alias module:invoker/api/StandardizedTagApi
   * @class
   * @param {module:invoker/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:invoker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Filter Standardized Tags
     * Returns Standarized Tags that match the given filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.tag Tag
     * @param {String} opts.type Type
     * @param {String} opts.parent ID of tag parent
     * @param {module:invoker/model/String} opts.statementCode Statement Code
     * @param {module:invoker/model/String} opts.fsTemplate Template (default to industrial)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:invoker/model/StandardizedTag>} and HTTP response
     */
    this.filterStandardizedTagsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'tag': opts['tag'],
        'type': opts['type'],
        'parent': opts['parent'],
        'statement_code': opts['statementCode'],
        'fs_template': opts['fsTemplate'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [StandardizedTag];

      return this.apiClient.callApi(
        '/standardized_tags/filter', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Filter Standardized Tags
     * Returns Standarized Tags that match the given filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.tag Tag
     * @param {String} opts.type Type
     * @param {String} opts.parent ID of tag parent
     * @param {module:invoker/model/String} opts.statementCode Statement Code
     * @param {module:invoker/model/String} opts.fsTemplate Template (default to industrial)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:invoker/model/StandardizedTag>}
     */
    this.filterStandardizedTags = function(opts) {
      return this.filterStandardizedTagsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Standardized Tags
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:invoker/model/StandardizedTag>} and HTTP response
     */
    this.getAllStandardizedTagsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [StandardizedTag];

      return this.apiClient.callApi(
        '/standardized_tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get All Standardized Tags
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:invoker/model/StandardizedTag>}
     */
    this.getAllStandardizedTags = function(opts) {
      return this.getAllStandardizedTagsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Standardized Tag by ID
     * @param {String} tagId The Intrinio ID for the tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:invoker/model/StandardizedTag} and HTTP response
     */
    this.getStandardizedTagByIdWithHttpInfo = function(tagId) {
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getStandardizedTagById");
      }


      var pathParams = {
        'tag_id': tagId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StandardizedTag;

      return this.apiClient.callApi(
        '/standardized_tags/{tag_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a Standardized Tag by ID
     * @param {String} tagId The Intrinio ID for the tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:invoker/model/StandardizedTag}
     */
    this.getStandardizedTagById = function(tagId) {
      return this.getStandardizedTagByIdWithHttpInfo(tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Data Point (Number) for The Standardized Tag
     * Returns a numeric data point for the Standardized Tag and entity &#x60;identifier&#x60;
     * @param {String} id The Intrinio Standardized Tag ID or its tag
     * @param {String} identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:invoker/model/DataPointNumber} and HTTP response
     */
    this.getStandardizedTagDataPointNumberWithHttpInfo = function(id, identifier) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStandardizedTagDataPointNumber");
      }

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStandardizedTagDataPointNumber");
      }


      var pathParams = {
        'id': id,
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataPointNumber;

      return this.apiClient.callApi(
        '/standardized_tags/{id}/data_point/{identifier}/number', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Data Point (Number) for The Standardized Tag
     * Returns a numeric data point for the Standardized Tag and entity &#x60;identifier&#x60;
     * @param {String} id The Intrinio Standardized Tag ID or its tag
     * @param {String} identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:invoker/model/DataPointNumber}
     */
    this.getStandardizedTagDataPointNumber = function(id, identifier) {
      return this.getStandardizedTagDataPointNumberWithHttpInfo(id, identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Data Point (Text) for the Standardized Tag
     * Returns a text data point for the Standardized Tag and entity &#x60;identifier&#x60;
     * @param {String} id The Intrinio Standardized Tag ID or its tag
     * @param {String} identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:invoker/model/DataPointText} and HTTP response
     */
    this.getStandardizedTagDataPointTextWithHttpInfo = function(id, identifier) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStandardizedTagDataPointText");
      }

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStandardizedTagDataPointText");
      }


      var pathParams = {
        'id': id,
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataPointText;

      return this.apiClient.callApi(
        '/standardized_tags/{id}/data_point/{identifier}/text', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Data Point (Text) for the Standardized Tag
     * Returns a text data point for the Standardized Tag and entity &#x60;identifier&#x60;
     * @param {String} id The Intrinio Standardized Tag ID or its tag
     * @param {String} identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:invoker/model/DataPointText}
     */
    this.getStandardizedTagDataPointText = function(id, identifier) {
      return this.getStandardizedTagDataPointTextWithHttpInfo(id, identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Historical Data for the Standardized Tag
     * Returns historical values for the Standardized Tag and the Entity represented by the given &#x60;identifier&#x60;
     * @param {String} id The Intrinio Standardized Tag ID or its tag
     * @param {String} identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical date on or before this date
     * @param {module:invoker/model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:invoker/model/HistoricalData>} and HTTP response
     */
    this.getStandardizedTagHistoricalDataWithHttpInfo = function(id, identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStandardizedTagHistoricalData");
      }

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStandardizedTagHistoricalData");
      }


      var pathParams = {
        'id': id,
        'identifier': identifier
      };
      var queryParams = {
        'type': opts['type'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'sort_order': opts['sortOrder'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [HistoricalData];

      return this.apiClient.callApi(
        '/standardized_tags/{id}/historical_data/{identifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Historical Data for the Standardized Tag
     * Returns historical values for the Standardized Tag and the Entity represented by the given &#x60;identifier&#x60;
     * @param {String} id The Intrinio Standardized Tag ID or its tag
     * @param {String} identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical date on or before this date
     * @param {module:invoker/model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:invoker/model/HistoricalData>}
     */
    this.getStandardizedTagHistoricalData = function(id, identifier, opts) {
      return this.getStandardizedTagHistoricalDataWithHttpInfo(id, identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Standardized Tags
     * Searches for Standardized Tags matching the text &#x60;query&#x60;
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:invoker/model/StandardizedTag>} and HTTP response
     */
    this.searchStandardizedTagsWithHttpInfo = function(query, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchStandardizedTags");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [StandardizedTag];

      return this.apiClient.callApi(
        '/standardized_tags/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Standardized Tags
     * Searches for Standardized Tags matching the text &#x60;query&#x60;
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:invoker/model/StandardizedTag>}
     */
    this.searchStandardizedTags = function(query, opts) {
      return this.searchStandardizedTagsWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
