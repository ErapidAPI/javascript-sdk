/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataPointNumber', 'model/DataPointText', 'model/EconomicIndex', 'model/EconomicIndexSummary', 'model/HistoricalData', 'model/SICIndex', 'model/StockMarketIndex', 'model/StockMarketIndexSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataPointNumber'), require('../model/DataPointText'), require('../model/EconomicIndex'), require('../model/EconomicIndexSummary'), require('../model/HistoricalData'), require('../model/SICIndex'), require('../model/StockMarketIndex'), require('../model/StockMarketIndexSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinio) {
      root.intrinio = {};
    }
    root.intrinio.IndexApi = factory(root.intrinio.ApiClient, root.intrinio.DataPointNumber, root.intrinio.DataPointText, root.intrinio.EconomicIndex, root.intrinio.EconomicIndexSummary, root.intrinio.HistoricalData, root.intrinio.SICIndex, root.intrinio.StockMarketIndex, root.intrinio.StockMarketIndexSummary);
  }
}(this, function(ApiClient, DataPointNumber, DataPointText, EconomicIndex, EconomicIndexSummary, HistoricalData, SICIndex, StockMarketIndex, StockMarketIndexSummary) {
  'use strict';

  /**
   * Index service.
   * @module api/IndexApi
   * @version 0.0.1
   */

  /**
   * Constructs a new IndexApi. 
   * @alias module:api/IndexApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get ALl Economic Indices
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/EconomicIndexSummary>} and HTTP response
     */
    this.getAllEconomicIndicesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EconomicIndexSummary];

      return this.apiClient.callApi(
        '/indices/economic', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get ALl Economic Indices
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/EconomicIndexSummary>}
     */
    this.getAllEconomicIndices = function(opts) {
      return this.getAllEconomicIndicesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All SIC Indices
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SICIndex>} and HTTP response
     */
    this.getAllSicIndicesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SICIndex];

      return this.apiClient.callApi(
        '/indices/sic', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get All SIC Indices
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SICIndex>}
     */
    this.getAllSicIndices = function(opts) {
      return this.getAllSicIndicesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get All Stock Market Indices
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/StockMarketIndexSummary>} and HTTP response
     */
    this.getAllStockMarketIndicesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [StockMarketIndexSummary];

      return this.apiClient.callApi(
        '/indices/stock_market', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get All Stock Market Indices
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/StockMarketIndexSummary>}
     */
    this.getAllStockMarketIndices = function(opts) {
      return this.getAllStockMarketIndicesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an Economic Index by ID
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EconomicIndex} and HTTP response
     */
    this.getEconomicIndexByIdWithHttpInfo = function(identifier) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getEconomicIndexById");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EconomicIndex;

      return this.apiClient.callApi(
        '/indices/economic/{identifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an Economic Index by ID
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EconomicIndex}
     */
    this.getEconomicIndexById = function(identifier) {
      return this.getEconomicIndexByIdWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Economic Index Data Point (Number)
     * Returns a numeric value for the given &#x60;item&#x60; for the Economic Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataPointNumber} and HTTP response
     */
    this.getEconomicIndexDataPointNumberWithHttpInfo = function(identifier, item) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getEconomicIndexDataPointNumber");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getEconomicIndexDataPointNumber");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataPointNumber;

      return this.apiClient.callApi(
        '/indices/economic/{identifier}/data_point/{item}/number', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Economic Index Data Point (Number)
     * Returns a numeric value for the given &#x60;item&#x60; for the Economic Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataPointNumber}
     */
    this.getEconomicIndexDataPointNumber = function(identifier, item) {
      return this.getEconomicIndexDataPointNumberWithHttpInfo(identifier, item)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Economic Index Data Point (Text)
     * Returns a text value for the given &#x60;item&#x60; for the Economic Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataPointText} and HTTP response
     */
    this.getEconomicIndexDataPointTextWithHttpInfo = function(identifier, item) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getEconomicIndexDataPointText");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getEconomicIndexDataPointText");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataPointText;

      return this.apiClient.callApi(
        '/indices/economic/{identifier}/data_point/{item}/text', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Economic Index Data Point (Text)
     * Returns a text value for the given &#x60;item&#x60; for the Economic Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataPointText}
     */
    this.getEconomicIndexDataPointText = function(identifier, item) {
      return this.getEconomicIndexDataPointTextWithHttpInfo(identifier, item)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Economic Index Historical Data
     * Returns historical values for the given &#x60;item&#x60; and the Economic Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical data on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {Number} opts.pageSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HistoricalData>} and HTTP response
     */
    this.getEconomicIndexHistoricalDataWithHttpInfo = function(identifier, item, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getEconomicIndexHistoricalData");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getEconomicIndexHistoricalData");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
        'type': opts['type'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'sort_order': opts['sortOrder'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [HistoricalData];

      return this.apiClient.callApi(
        '/indices/economic/{identifier}/historical_data/{item}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Economic Index Historical Data
     * Returns historical values for the given &#x60;item&#x60; and the Economic Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical data on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {Number} opts.pageSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HistoricalData>}
     */
    this.getEconomicIndexHistoricalData = function(identifier, item, opts) {
      return this.getEconomicIndexHistoricalDataWithHttpInfo(identifier, item, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an SIC Index by ID
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SICIndex} and HTTP response
     */
    this.getSicIndexByIdWithHttpInfo = function(identifier) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSicIndexById");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SICIndex;

      return this.apiClient.callApi(
        '/indices/sic/{identifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an SIC Index by ID
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SICIndex}
     */
    this.getSicIndexById = function(identifier) {
      return this.getSicIndexByIdWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get SIC Index Data Point (Number)
     * Returns a numeric value for the given &#x60;item&#x60; for the SIC Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataPointNumber} and HTTP response
     */
    this.getSicIndexDataPointNumberWithHttpInfo = function(identifier, item) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSicIndexDataPointNumber");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getSicIndexDataPointNumber");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataPointNumber;

      return this.apiClient.callApi(
        '/indices/sic/{identifier}/data_point/{item}/number', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get SIC Index Data Point (Number)
     * Returns a numeric value for the given &#x60;item&#x60; for the SIC Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataPointNumber}
     */
    this.getSicIndexDataPointNumber = function(identifier, item) {
      return this.getSicIndexDataPointNumberWithHttpInfo(identifier, item)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get SIC Index Data Point (Text)
     * Returns a text value for the given &#x60;item&#x60; for the SIC Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataPointText} and HTTP response
     */
    this.getSicIndexDataPointTextWithHttpInfo = function(identifier, item) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSicIndexDataPointText");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getSicIndexDataPointText");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataPointText;

      return this.apiClient.callApi(
        '/indices/sic/{identifier}/data_point/{item}/text', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get SIC Index Data Point (Text)
     * Returns a text value for the given &#x60;item&#x60; for the SIC Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataPointText}
     */
    this.getSicIndexDataPointText = function(identifier, item) {
      return this.getSicIndexDataPointTextWithHttpInfo(identifier, item)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get SIC Index Historical Data
     * Returns historical values for the given &#x60;item&#x60; and the SIC Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical data on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {Number} opts.pageSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HistoricalData>} and HTTP response
     */
    this.getSicIndexHistoricalDataWithHttpInfo = function(identifier, item, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSicIndexHistoricalData");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getSicIndexHistoricalData");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
        'type': opts['type'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'sort_order': opts['sortOrder'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [HistoricalData];

      return this.apiClient.callApi(
        '/indices/sic/{identifier}/historical_data/{item}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get SIC Index Historical Data
     * Returns historical values for the given &#x60;item&#x60; and the SIC Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical data on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {Number} opts.pageSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HistoricalData>}
     */
    this.getSicIndexHistoricalData = function(identifier, item, opts) {
      return this.getSicIndexHistoricalDataWithHttpInfo(identifier, item, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Stock Market Index by ID
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StockMarketIndex} and HTTP response
     */
    this.getStockMarketIndexByIdWithHttpInfo = function(identifier) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockMarketIndexById");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = StockMarketIndex;

      return this.apiClient.callApi(
        '/indices/stock_market/{identifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a Stock Market Index by ID
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StockMarketIndex}
     */
    this.getStockMarketIndexById = function(identifier) {
      return this.getStockMarketIndexByIdWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Stock Market Index Data Point (Number)
     * Returns a numeric value for the given &#x60;item&#x60; for the Stock Market Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataPointNumber} and HTTP response
     */
    this.getStockMarketIndexDataPointNumberWithHttpInfo = function(identifier, item) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockMarketIndexDataPointNumber");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getStockMarketIndexDataPointNumber");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataPointNumber;

      return this.apiClient.callApi(
        '/indices/stock_market/{identifier}/data_point/{item}/number', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Stock Market Index Data Point (Number)
     * Returns a numeric value for the given &#x60;item&#x60; for the Stock Market Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataPointNumber}
     */
    this.getStockMarketIndexDataPointNumber = function(identifier, item) {
      return this.getStockMarketIndexDataPointNumberWithHttpInfo(identifier, item)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Stock Market Index Data Point (Text)
     * Returns a text value for the given &#x60;item&#x60; for the Stock Market Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataPointText} and HTTP response
     */
    this.getStockMarketIndexDataPointTextWithHttpInfo = function(identifier, item) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockMarketIndexDataPointText");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getStockMarketIndexDataPointText");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DataPointText;

      return this.apiClient.callApi(
        '/indices/stock_market/{identifier}/data_point/{item}/text', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Stock Market Index Data Point (Text)
     * Returns a text value for the given &#x60;item&#x60; for the Stock Market Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DataPointText}
     */
    this.getStockMarketIndexDataPointText = function(identifier, item) {
      return this.getStockMarketIndexDataPointTextWithHttpInfo(identifier, item)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Stock Market Index Historical Data
     * Returns historical values for the given &#x60;item&#x60; and the Stock Market Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical data on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {Number} opts.pageSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HistoricalData>} and HTTP response
     */
    this.getStockMarketIndexHistoricalDataWithHttpInfo = function(identifier, item, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getStockMarketIndexHistoricalData");
      }

      // verify the required parameter 'item' is set
      if (item === undefined || item === null) {
        throw new Error("Missing the required parameter 'item' when calling getStockMarketIndexHistoricalData");
      }


      var pathParams = {
        'identifier': identifier,
        'item': item
      };
      var queryParams = {
        'type': opts['type'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'sort_order': opts['sortOrder'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [HistoricalData];

      return this.apiClient.callApi(
        '/indices/stock_market/{identifier}/historical_data/{item}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Stock Market Index Historical Data
     * Returns historical values for the given &#x60;item&#x60; and the Stock Market Index with the given &#x60;identifier&#x60;
     * @param {String} identifier An Index Identifier (symbol, Intrinio ID)
     * @param {String} item An Intrinio data tag or other item
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical data on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {Number} opts.pageSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HistoricalData>}
     */
    this.getStockMarketIndexHistoricalData = function(identifier, item, opts) {
      return this.getStockMarketIndexHistoricalDataWithHttpInfo(identifier, item, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Economic Indices
     * Searches for indices using the text in &#x60;query&#x60;
     * @param {String} query Search query
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/EconomicIndexSummary>} and HTTP response
     */
    this.searchEconomicIndicesWithHttpInfo = function(query, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchEconomicIndices");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EconomicIndexSummary];

      return this.apiClient.callApi(
        '/indices/economic/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Economic Indices
     * Searches for indices using the text in &#x60;query&#x60;
     * @param {String} query Search query
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/EconomicIndexSummary>}
     */
    this.searchEconomicIndices = function(query, opts) {
      return this.searchEconomicIndicesWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search SIC Indices
     * Searches for indices using the text in &#x60;query&#x60;
     * @param {String} query Search query
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SICIndex>} and HTTP response
     */
    this.searchSicIndicesWithHttpInfo = function(query, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchSicIndices");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SICIndex];

      return this.apiClient.callApi(
        '/indices/sic/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search SIC Indices
     * Searches for indices using the text in &#x60;query&#x60;
     * @param {String} query Search query
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SICIndex>}
     */
    this.searchSicIndices = function(query, opts) {
      return this.searchSicIndicesWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Stock Market Indices
     * Searches for indices using the text in &#x60;query&#x60;
     * @param {String} query Search query
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/StockMarketIndexSummary>} and HTTP response
     */
    this.searchStockMarketsIndicesWithHttpInfo = function(query, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchStockMarketsIndices");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['HttpHeaderApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [StockMarketIndexSummary];

      return this.apiClient.callApi(
        '/indices/stock_market/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Stock Market Indices
     * Searches for indices using the text in &#x60;query&#x60;
     * @param {String} query Search query
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/StockMarketIndexSummary>}
     */
    this.searchStockMarketsIndices = function(query, opts) {
      return this.searchStockMarketsIndicesWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
