/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.6.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponseCryptoAccumulationDistributionIndex', 'model/ApiResponseCryptoAverageDailyTradingVolume', 'model/ApiResponseCryptoAverageDirectionalIndex', 'model/ApiResponseCryptoAverageTrueRange', 'model/ApiResponseCryptoAwesomeOscillator', 'model/ApiResponseCryptoBollingerBands', 'model/ApiResponseCryptoBook', 'model/ApiResponseCryptoBookAsks', 'model/ApiResponseCryptoBookBids', 'model/ApiResponseCryptoChaikinMoneyFlow', 'model/ApiResponseCryptoCommodityChannelIndex', 'model/ApiResponseCryptoCurrencies', 'model/ApiResponseCryptoDetrendedPriceOscillator', 'model/ApiResponseCryptoDonchianChannel', 'model/ApiResponseCryptoEaseOfMovement', 'model/ApiResponseCryptoExchanges', 'model/ApiResponseCryptoForceIndex', 'model/ApiResponseCryptoIchimokuKinkoHyo', 'model/ApiResponseCryptoKeltnerChannel', 'model/ApiResponseCryptoKnowSureThing', 'model/ApiResponseCryptoMassIndex', 'model/ApiResponseCryptoMoneyFlowIndex', 'model/ApiResponseCryptoMovingAverageConvergenceDivergence', 'model/ApiResponseCryptoNegativeVolumeIndex', 'model/ApiResponseCryptoOnBalanceVolume', 'model/ApiResponseCryptoOnBalanceVolumeMean', 'model/ApiResponseCryptoPairs', 'model/ApiResponseCryptoPrices', 'model/ApiResponseCryptoRelativeStrengthIndex', 'model/ApiResponseCryptoSimpleMovingAverage', 'model/ApiResponseCryptoSnapshot', 'model/ApiResponseCryptoStats', 'model/ApiResponseCryptoStochasticOscillator', 'model/ApiResponseCryptoTripleExponentialAverage', 'model/ApiResponseCryptoTrueStrengthIndex', 'model/ApiResponseCryptoUltimateOscillator', 'model/ApiResponseCryptoVolumePriceTrend', 'model/ApiResponseCryptoVolumeWeightedAveragePrice', 'model/ApiResponseCryptoVortexIndicator', 'model/ApiResponseCryptoWilliamsR'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponseCryptoAccumulationDistributionIndex'), require('../model/ApiResponseCryptoAverageDailyTradingVolume'), require('../model/ApiResponseCryptoAverageDirectionalIndex'), require('../model/ApiResponseCryptoAverageTrueRange'), require('../model/ApiResponseCryptoAwesomeOscillator'), require('../model/ApiResponseCryptoBollingerBands'), require('../model/ApiResponseCryptoBook'), require('../model/ApiResponseCryptoBookAsks'), require('../model/ApiResponseCryptoBookBids'), require('../model/ApiResponseCryptoChaikinMoneyFlow'), require('../model/ApiResponseCryptoCommodityChannelIndex'), require('../model/ApiResponseCryptoCurrencies'), require('../model/ApiResponseCryptoDetrendedPriceOscillator'), require('../model/ApiResponseCryptoDonchianChannel'), require('../model/ApiResponseCryptoEaseOfMovement'), require('../model/ApiResponseCryptoExchanges'), require('../model/ApiResponseCryptoForceIndex'), require('../model/ApiResponseCryptoIchimokuKinkoHyo'), require('../model/ApiResponseCryptoKeltnerChannel'), require('../model/ApiResponseCryptoKnowSureThing'), require('../model/ApiResponseCryptoMassIndex'), require('../model/ApiResponseCryptoMoneyFlowIndex'), require('../model/ApiResponseCryptoMovingAverageConvergenceDivergence'), require('../model/ApiResponseCryptoNegativeVolumeIndex'), require('../model/ApiResponseCryptoOnBalanceVolume'), require('../model/ApiResponseCryptoOnBalanceVolumeMean'), require('../model/ApiResponseCryptoPairs'), require('../model/ApiResponseCryptoPrices'), require('../model/ApiResponseCryptoRelativeStrengthIndex'), require('../model/ApiResponseCryptoSimpleMovingAverage'), require('../model/ApiResponseCryptoSnapshot'), require('../model/ApiResponseCryptoStats'), require('../model/ApiResponseCryptoStochasticOscillator'), require('../model/ApiResponseCryptoTripleExponentialAverage'), require('../model/ApiResponseCryptoTrueStrengthIndex'), require('../model/ApiResponseCryptoUltimateOscillator'), require('../model/ApiResponseCryptoVolumePriceTrend'), require('../model/ApiResponseCryptoVolumeWeightedAveragePrice'), require('../model/ApiResponseCryptoVortexIndicator'), require('../model/ApiResponseCryptoWilliamsR'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinioSDK) {
      root.intrinioSDK = {};
    }
    root.intrinioSDK.CryptoApi = factory(root.intrinioSDK.ApiClient, root.intrinioSDK.ApiResponseCryptoAccumulationDistributionIndex, root.intrinioSDK.ApiResponseCryptoAverageDailyTradingVolume, root.intrinioSDK.ApiResponseCryptoAverageDirectionalIndex, root.intrinioSDK.ApiResponseCryptoAverageTrueRange, root.intrinioSDK.ApiResponseCryptoAwesomeOscillator, root.intrinioSDK.ApiResponseCryptoBollingerBands, root.intrinioSDK.ApiResponseCryptoBook, root.intrinioSDK.ApiResponseCryptoBookAsks, root.intrinioSDK.ApiResponseCryptoBookBids, root.intrinioSDK.ApiResponseCryptoChaikinMoneyFlow, root.intrinioSDK.ApiResponseCryptoCommodityChannelIndex, root.intrinioSDK.ApiResponseCryptoCurrencies, root.intrinioSDK.ApiResponseCryptoDetrendedPriceOscillator, root.intrinioSDK.ApiResponseCryptoDonchianChannel, root.intrinioSDK.ApiResponseCryptoEaseOfMovement, root.intrinioSDK.ApiResponseCryptoExchanges, root.intrinioSDK.ApiResponseCryptoForceIndex, root.intrinioSDK.ApiResponseCryptoIchimokuKinkoHyo, root.intrinioSDK.ApiResponseCryptoKeltnerChannel, root.intrinioSDK.ApiResponseCryptoKnowSureThing, root.intrinioSDK.ApiResponseCryptoMassIndex, root.intrinioSDK.ApiResponseCryptoMoneyFlowIndex, root.intrinioSDK.ApiResponseCryptoMovingAverageConvergenceDivergence, root.intrinioSDK.ApiResponseCryptoNegativeVolumeIndex, root.intrinioSDK.ApiResponseCryptoOnBalanceVolume, root.intrinioSDK.ApiResponseCryptoOnBalanceVolumeMean, root.intrinioSDK.ApiResponseCryptoPairs, root.intrinioSDK.ApiResponseCryptoPrices, root.intrinioSDK.ApiResponseCryptoRelativeStrengthIndex, root.intrinioSDK.ApiResponseCryptoSimpleMovingAverage, root.intrinioSDK.ApiResponseCryptoSnapshot, root.intrinioSDK.ApiResponseCryptoStats, root.intrinioSDK.ApiResponseCryptoStochasticOscillator, root.intrinioSDK.ApiResponseCryptoTripleExponentialAverage, root.intrinioSDK.ApiResponseCryptoTrueStrengthIndex, root.intrinioSDK.ApiResponseCryptoUltimateOscillator, root.intrinioSDK.ApiResponseCryptoVolumePriceTrend, root.intrinioSDK.ApiResponseCryptoVolumeWeightedAveragePrice, root.intrinioSDK.ApiResponseCryptoVortexIndicator, root.intrinioSDK.ApiResponseCryptoWilliamsR);
  }
}(this, function(ApiClient, ApiResponseCryptoAccumulationDistributionIndex, ApiResponseCryptoAverageDailyTradingVolume, ApiResponseCryptoAverageDirectionalIndex, ApiResponseCryptoAverageTrueRange, ApiResponseCryptoAwesomeOscillator, ApiResponseCryptoBollingerBands, ApiResponseCryptoBook, ApiResponseCryptoBookAsks, ApiResponseCryptoBookBids, ApiResponseCryptoChaikinMoneyFlow, ApiResponseCryptoCommodityChannelIndex, ApiResponseCryptoCurrencies, ApiResponseCryptoDetrendedPriceOscillator, ApiResponseCryptoDonchianChannel, ApiResponseCryptoEaseOfMovement, ApiResponseCryptoExchanges, ApiResponseCryptoForceIndex, ApiResponseCryptoIchimokuKinkoHyo, ApiResponseCryptoKeltnerChannel, ApiResponseCryptoKnowSureThing, ApiResponseCryptoMassIndex, ApiResponseCryptoMoneyFlowIndex, ApiResponseCryptoMovingAverageConvergenceDivergence, ApiResponseCryptoNegativeVolumeIndex, ApiResponseCryptoOnBalanceVolume, ApiResponseCryptoOnBalanceVolumeMean, ApiResponseCryptoPairs, ApiResponseCryptoPrices, ApiResponseCryptoRelativeStrengthIndex, ApiResponseCryptoSimpleMovingAverage, ApiResponseCryptoSnapshot, ApiResponseCryptoStats, ApiResponseCryptoStochasticOscillator, ApiResponseCryptoTripleExponentialAverage, ApiResponseCryptoTrueStrengthIndex, ApiResponseCryptoUltimateOscillator, ApiResponseCryptoVolumePriceTrend, ApiResponseCryptoVolumeWeightedAveragePrice, ApiResponseCryptoVortexIndicator, ApiResponseCryptoWilliamsR) {
  'use strict';

  /**
   * Crypto service.
   * @module api/CryptoApi
   * @version 2.3.0
   */

  /**
   * Constructs a new CryptoApi. 
   * @alias module:api/CryptoApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Crypto Book Asks
     * Returns the entire ask order book for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the order book asks for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book asks for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book asks for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoBookAsks} and HTTP response
     */
    this.getCryptoBookAsksWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoBookAsks;

      return this.apiClient.callApi(
        '/crypto/book/asks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Book Asks
     * Returns the entire ask order book for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the order book asks for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book asks for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book asks for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoBookAsks}
     */
    this.getCryptoBookAsks = function(opts) {
      return this.getCryptoBookAsksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Book Bids
     * Returns the entire bid order book for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the order book bids for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book bids for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book bids for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoBookBids} and HTTP response
     */
    this.getCryptoBookBidsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoBookBids;

      return this.apiClient.callApi(
        '/crypto/book/bids', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Book Bids
     * Returns the entire bid order book for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the order book bids for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book bids for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book bids for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoBookBids}
     */
    this.getCryptoBookBids = function(opts) {
      return this.getCryptoBookBidsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Book Summary
     * Returns the order book summary (bid/ask prices and size) for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels The number of prices/levels to return on each side. For example, the max of 50 levels will return up to 50 bid prices and 50 ask prices.
     * @param {String} opts.pair Return the order book summary for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book summary for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book summary for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoBook} and HTTP response
     */
    this.getCryptoBookSummaryWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'levels': opts['levels'],
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoBook;

      return this.apiClient.callApi(
        '/crypto/book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Book Summary
     * Returns the order book summary (bid/ask prices and size) for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels The number of prices/levels to return on each side. For example, the max of 50 levels will return up to 50 bid prices and 50 ask prices.
     * @param {String} opts.pair Return the order book summary for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book summary for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book summary for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoBook}
     */
    this.getCryptoBookSummary = function(opts) {
      return this.getCryptoBookSummaryWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Currencies
     * Returns a list of Crypto Currencies for which prices are available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Returns Crypto Currencies traded on the given Crypto Exchange.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoCurrencies} and HTTP response
     */
    this.getCryptoCurrenciesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'exchange': opts['exchange'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoCurrencies;

      return this.apiClient.callApi(
        '/crypto/currencies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Currencies
     * Returns a list of Crypto Currencies for which prices are available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Returns Crypto Currencies traded on the given Crypto Exchange.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoCurrencies}
     */
    this.getCryptoCurrencies = function(opts) {
      return this.getCryptoCurrenciesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Exchanges
     * Returns a list of Crypto Exchanges for which prices are available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Filter exchanges based on whether or not prices are available on the exchange for the crypto currency pair.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoExchanges} and HTTP response
     */
    this.getCryptoExchangesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoExchanges;

      return this.apiClient.callApi(
        '/crypto/exchanges', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Exchanges
     * Returns a list of Crypto Exchanges for which prices are available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Filter exchanges based on whether or not prices are available on the exchange for the crypto currency pair.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoExchanges}
     */
    this.getCryptoExchanges = function(opts) {
      return this.getCryptoExchangesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Pairs
     * Returns a list of Crypto Currency Pairs for which data is available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Return pairs traded on the given Crypto Exchange.
     * @param {String} opts.currency Return pairs with one side being the given Crypto Currency.
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoPairs} and HTTP response
     */
    this.getCryptoPairsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoPairs;

      return this.apiClient.callApi(
        '/crypto/pairs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Pairs
     * Returns a list of Crypto Currency Pairs for which data is available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Return pairs traded on the given Crypto Exchange.
     * @param {String} opts.currency Return pairs with one side being the given Crypto Currency.
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoPairs}
     */
    this.getCryptoPairs = function(opts) {
      return this.getCryptoPairsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Accumulation/Distribution Index
     * Returns the Accumulation/Distribution Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoAccumulationDistributionIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsAdiWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoAccumulationDistributionIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/adi', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Accumulation/Distribution Index
     * Returns the Accumulation/Distribution Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoAccumulationDistributionIndex}
     */
    this.getCryptoPriceTechnicalsAdi = function(opts) {
      return this.getCryptoPriceTechnicalsAdiWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Average Daily Trading Volume
     * Returns the Average Daily Trading Volume values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Average Daily Trading Volume. (default to 22)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoAverageDailyTradingVolume} and HTTP response
     */
    this.getCryptoPriceTechnicalsAdtvWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoAverageDailyTradingVolume;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/adtv', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Average Daily Trading Volume
     * Returns the Average Daily Trading Volume values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Average Daily Trading Volume. (default to 22)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoAverageDailyTradingVolume}
     */
    this.getCryptoPriceTechnicalsAdtv = function(opts) {
      return this.getCryptoPriceTechnicalsAdtvWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Average Directional Index
     * Returns the Average Directional Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Average Directional Index. (default to 22)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoAverageDirectionalIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsAdxWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoAverageDirectionalIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/adx', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Average Directional Index
     * Returns the Average Directional Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Average Directional Index. (default to 22)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoAverageDirectionalIndex}
     */
    this.getCryptoPriceTechnicalsAdx = function(opts) {
      return this.getCryptoPriceTechnicalsAdxWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Awesome Oscillator
     * Returns the Awesome Oscillator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.shortPeriod The number of observations, per period, to calculate short period Simple Moving Average of the Awesome Oscillator. (default to 5)
     * @param {Number} opts.longPeriod The number of observations, per period, to calculate long period Simple Moving Average of the Awesome Oscillator. (default to 34)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoAwesomeOscillator} and HTTP response
     */
    this.getCryptoPriceTechnicalsAoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'short_period': opts['shortPeriod'],
        'long_period': opts['longPeriod'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoAwesomeOscillator;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/ao', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Awesome Oscillator
     * Returns the Awesome Oscillator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.shortPeriod The number of observations, per period, to calculate short period Simple Moving Average of the Awesome Oscillator. (default to 5)
     * @param {Number} opts.longPeriod The number of observations, per period, to calculate long period Simple Moving Average of the Awesome Oscillator. (default to 34)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoAwesomeOscillator}
     */
    this.getCryptoPriceTechnicalsAo = function(opts) {
      return this.getCryptoPriceTechnicalsAoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Average True Range
     * Returns the Average True Range values of Crypto Currency Prices for Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Average True Range. (default to 22)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoAverageTrueRange} and HTTP response
     */
    this.getCryptoPriceTechnicalsAtrWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoAverageTrueRange;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/atr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Average True Range
     * Returns the Average True Range values of Crypto Currency Prices for Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Average True Range. (default to 22)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoAverageTrueRange}
     */
    this.getCryptoPriceTechnicalsAtr = function(opts) {
      return this.getCryptoPriceTechnicalsAtrWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Bollinger Bands
     * Returns the Bollinger Bands values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Bollinger Bands. (default to 20)
     * @param {Number} opts.standardDeviations The number of standard deviations to calculate the upper and lower bands of the Bollinger Bands. (default to 2.0)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Bollinger Bands. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoBollingerBands} and HTTP response
     */
    this.getCryptoPriceTechnicalsBbWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'standard_deviations': opts['standardDeviations'],
        'price_key': opts['priceKey'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoBollingerBands;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/bb', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Bollinger Bands
     * Returns the Bollinger Bands values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Bollinger Bands. (default to 20)
     * @param {Number} opts.standardDeviations The number of standard deviations to calculate the upper and lower bands of the Bollinger Bands. (default to 2.0)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Bollinger Bands. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoBollingerBands}
     */
    this.getCryptoPriceTechnicalsBb = function(opts) {
      return this.getCryptoPriceTechnicalsBbWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Commodity Channel Index
     * Returns the Commodity Channel Index values of Crypto Currency Prices for Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Commodity Channel Index. (default to 20)
     * @param {Number} opts.constant The number of observations, per period, to calculate Commodity Channel Index. (default to 0.015)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoCommodityChannelIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsCciWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'constant': opts['constant'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoCommodityChannelIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/cci', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Commodity Channel Index
     * Returns the Commodity Channel Index values of Crypto Currency Prices for Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Commodity Channel Index. (default to 20)
     * @param {Number} opts.constant The number of observations, per period, to calculate Commodity Channel Index. (default to 0.015)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoCommodityChannelIndex}
     */
    this.getCryptoPriceTechnicalsCci = function(opts) {
      return this.getCryptoPriceTechnicalsCciWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Chaikin Money Flow
     * Returns the Chaikin Money Flow values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Chaikin Money Flow. (default to 20)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoChaikinMoneyFlow} and HTTP response
     */
    this.getCryptoPriceTechnicalsCmfWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoChaikinMoneyFlow;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/cmf', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Chaikin Money Flow
     * Returns the Chaikin Money Flow values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Chaikin Money Flow. (default to 20)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoChaikinMoneyFlow}
     */
    this.getCryptoPriceTechnicalsCmf = function(opts) {
      return this.getCryptoPriceTechnicalsCmfWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Donchian Channel
     * Returns the Donchian Channel values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Donchian Channel. (default to 20)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Donchian Channel. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoDonchianChannel} and HTTP response
     */
    this.getCryptoPriceTechnicalsDcWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'price_key': opts['priceKey'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoDonchianChannel;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/dc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Donchian Channel
     * Returns the Donchian Channel values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Donchian Channel. (default to 20)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Donchian Channel. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoDonchianChannel}
     */
    this.getCryptoPriceTechnicalsDc = function(opts) {
      return this.getCryptoPriceTechnicalsDcWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Detrended Price Oscillator
     * Returns the Detrended Price Oscillator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Detrended Price Oscillator. (default to 20)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Detrended Price Oscillator. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoDetrendedPriceOscillator} and HTTP response
     */
    this.getCryptoPriceTechnicalsDpoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'price_key': opts['priceKey'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoDetrendedPriceOscillator;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/dpo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Detrended Price Oscillator
     * Returns the Detrended Price Oscillator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Detrended Price Oscillator. (default to 20)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Detrended Price Oscillator. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoDetrendedPriceOscillator}
     */
    this.getCryptoPriceTechnicalsDpo = function(opts) {
      return this.getCryptoPriceTechnicalsDpoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Ease of Movement
     * Returns the Ease of Movement values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Ease of Movement. (default to 20)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoEaseOfMovement} and HTTP response
     */
    this.getCryptoPriceTechnicalsEomWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoEaseOfMovement;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/eom', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Ease of Movement
     * Returns the Ease of Movement values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Ease of Movement. (default to 20)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoEaseOfMovement}
     */
    this.getCryptoPriceTechnicalsEom = function(opts) {
      return this.getCryptoPriceTechnicalsEomWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Force Index
     * Returns the Force Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoForceIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsFiWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoForceIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/fi', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Force Index
     * Returns the Force Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoForceIndex}
     */
    this.getCryptoPriceTechnicalsFi = function(opts) {
      return this.getCryptoPriceTechnicalsFiWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Ichimoku Kinko Hyo
     * Returns the Ichimoku Kinko Hyo values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.lowPeriod The number of observations, per period, to calculate Tenkan Sen (Conversion Line) of Ichimoku Kinko Hyo. (default to 9)
     * @param {Number} opts.mediumPeriod The number of observations, per period, to calculate Kijun Sen (Base Line), Senkou Span A (Leading Span A), and Chikou Span (Lagging Span) of Ichimoku Kinko Hyo. (default to 26)
     * @param {Number} opts.highPeriod The number of observations, per period, to calculate Senkou Span B (Leading Span B) of Ichimoku Kinko Hyo. (default to 52)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoIchimokuKinkoHyo} and HTTP response
     */
    this.getCryptoPriceTechnicalsIchimokuWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'low_period': opts['lowPeriod'],
        'medium_period': opts['mediumPeriod'],
        'high_period': opts['highPeriod'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoIchimokuKinkoHyo;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/ichimoku', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Ichimoku Kinko Hyo
     * Returns the Ichimoku Kinko Hyo values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.lowPeriod The number of observations, per period, to calculate Tenkan Sen (Conversion Line) of Ichimoku Kinko Hyo. (default to 9)
     * @param {Number} opts.mediumPeriod The number of observations, per period, to calculate Kijun Sen (Base Line), Senkou Span A (Leading Span A), and Chikou Span (Lagging Span) of Ichimoku Kinko Hyo. (default to 26)
     * @param {Number} opts.highPeriod The number of observations, per period, to calculate Senkou Span B (Leading Span B) of Ichimoku Kinko Hyo. (default to 52)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoIchimokuKinkoHyo}
     */
    this.getCryptoPriceTechnicalsIchimoku = function(opts) {
      return this.getCryptoPriceTechnicalsIchimokuWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Keltner Channel
     * Returns the Keltner Channel values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Kelter Channel. (default to 10)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoKeltnerChannel} and HTTP response
     */
    this.getCryptoPriceTechnicalsKcWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoKeltnerChannel;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/kc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Keltner Channel
     * Returns the Keltner Channel values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Kelter Channel. (default to 10)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoKeltnerChannel}
     */
    this.getCryptoPriceTechnicalsKc = function(opts) {
      return this.getCryptoPriceTechnicalsKcWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Know Sure Thing
     * Returns the Know Sure Thing values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.roc1 The number of observations, per period, to calculate the rate-of-change for RCMA1. (default to 10)
     * @param {Number} opts.roc2 The number of observations, per period, to calculate the rate-of-change for RCMA2. (default to 15)
     * @param {Number} opts.roc3 The number of observations, per period, to calculate the rate-of-change for RCMA3. (default to 20)
     * @param {Number} opts.roc4 The number of observations, per period, to calculate the rate-of-change for RCMA4. (default to 30)
     * @param {Number} opts.sma1 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA1. (default to 10)
     * @param {Number} opts.sma2 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA2. (default to 10)
     * @param {Number} opts.sma3 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA3. (default to 10)
     * @param {Number} opts.sma4 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA4. (default to 15)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Know Sure Thing. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoKnowSureThing} and HTTP response
     */
    this.getCryptoPriceTechnicalsKstWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'roc1': opts['roc1'],
        'roc2': opts['roc2'],
        'roc3': opts['roc3'],
        'roc4': opts['roc4'],
        'sma1': opts['sma1'],
        'sma2': opts['sma2'],
        'sma3': opts['sma3'],
        'sma4': opts['sma4'],
        'price_key': opts['priceKey'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoKnowSureThing;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/kst', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Know Sure Thing
     * Returns the Know Sure Thing values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.roc1 The number of observations, per period, to calculate the rate-of-change for RCMA1. (default to 10)
     * @param {Number} opts.roc2 The number of observations, per period, to calculate the rate-of-change for RCMA2. (default to 15)
     * @param {Number} opts.roc3 The number of observations, per period, to calculate the rate-of-change for RCMA3. (default to 20)
     * @param {Number} opts.roc4 The number of observations, per period, to calculate the rate-of-change for RCMA4. (default to 30)
     * @param {Number} opts.sma1 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA1. (default to 10)
     * @param {Number} opts.sma2 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA2. (default to 10)
     * @param {Number} opts.sma3 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA3. (default to 10)
     * @param {Number} opts.sma4 The number of observations, per period, to calculate the Simple Moving Average of the rate-of-change for RCMA4. (default to 15)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Know Sure Thing. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoKnowSureThing}
     */
    this.getCryptoPriceTechnicalsKst = function(opts) {
      return this.getCryptoPriceTechnicalsKstWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Moving Average Convergence Divergence
     * Returns the Moving Average Convergence Divergence values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.fastPeriod The number of observations, per period, to calculate the fast moving Exponential Moving Average for Moving Average Convergence Divergence. (default to 12)
     * @param {Number} opts.slowPeriod The number of observations, per period, to calculate the slow moving Exponential Moving Average for Moving Average Convergence Divergence. (default to 26)
     * @param {Number} opts.signalPeriod The number of observations, per period, to calculate the signal line for Moving Average Convergence Divergence. (default to 9)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Moving Average Convergence Divergence. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoMovingAverageConvergenceDivergence} and HTTP response
     */
    this.getCryptoPriceTechnicalsMacdWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'fast_period': opts['fastPeriod'],
        'slow_period': opts['slowPeriod'],
        'signal_period': opts['signalPeriod'],
        'price_key': opts['priceKey'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoMovingAverageConvergenceDivergence;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/macd', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Moving Average Convergence Divergence
     * Returns the Moving Average Convergence Divergence values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.fastPeriod The number of observations, per period, to calculate the fast moving Exponential Moving Average for Moving Average Convergence Divergence. (default to 12)
     * @param {Number} opts.slowPeriod The number of observations, per period, to calculate the slow moving Exponential Moving Average for Moving Average Convergence Divergence. (default to 26)
     * @param {Number} opts.signalPeriod The number of observations, per period, to calculate the signal line for Moving Average Convergence Divergence. (default to 9)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Moving Average Convergence Divergence. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoMovingAverageConvergenceDivergence}
     */
    this.getCryptoPriceTechnicalsMacd = function(opts) {
      return this.getCryptoPriceTechnicalsMacdWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Money Flow Index
     * Returns the Money Flow Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Money Flow Index. (default to 14)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoMoneyFlowIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsMfiWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoMoneyFlowIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/mfi', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Money Flow Index
     * Returns the Money Flow Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Money Flow Index. (default to 14)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoMoneyFlowIndex}
     */
    this.getCryptoPriceTechnicalsMfi = function(opts) {
      return this.getCryptoPriceTechnicalsMfiWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mass Index
     * Returns the Mass Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.emaPeriod The number of observations, per period, to calculate the single Exponential Moving Average and the Double Exponential Moving Average for Mass Index. (default to 9)
     * @param {Number} opts.sumPeriod The number of observations, per period, to calculate the sum of the Exponetinal Moving Average Ratios for Mass Index. (default to 25)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoMassIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsMiWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'ema_period': opts['emaPeriod'],
        'sum_period': opts['sumPeriod'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoMassIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/mi', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Mass Index
     * Returns the Mass Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.emaPeriod The number of observations, per period, to calculate the single Exponential Moving Average and the Double Exponential Moving Average for Mass Index. (default to 9)
     * @param {Number} opts.sumPeriod The number of observations, per period, to calculate the sum of the Exponetinal Moving Average Ratios for Mass Index. (default to 25)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoMassIndex}
     */
    this.getCryptoPriceTechnicalsMi = function(opts) {
      return this.getCryptoPriceTechnicalsMiWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Negative Volume Index
     * Returns the Negative Volume Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoNegativeVolumeIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsNviWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoNegativeVolumeIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/nvi', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Negative Volume Index
     * Returns the Negative Volume Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoNegativeVolumeIndex}
     */
    this.getCryptoPriceTechnicalsNvi = function(opts) {
      return this.getCryptoPriceTechnicalsNviWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * On-balance Volume
     * Returns the On-balance Volume values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoOnBalanceVolume} and HTTP response
     */
    this.getCryptoPriceTechnicalsObvWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoOnBalanceVolume;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/obv', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * On-balance Volume
     * Returns the On-balance Volume values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoOnBalanceVolume}
     */
    this.getCryptoPriceTechnicalsObv = function(opts) {
      return this.getCryptoPriceTechnicalsObvWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * On-balance Volume Mean
     * Returns the On-balance Volume Mean values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate On-balance Volume Mean. (default to 10)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoOnBalanceVolumeMean} and HTTP response
     */
    this.getCryptoPriceTechnicalsObvMeanWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoOnBalanceVolumeMean;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/obv_mean', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * On-balance Volume Mean
     * Returns the On-balance Volume Mean values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate On-balance Volume Mean. (default to 10)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoOnBalanceVolumeMean}
     */
    this.getCryptoPriceTechnicalsObvMean = function(opts) {
      return this.getCryptoPriceTechnicalsObvMeanWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Relative Strength Index
     * Returns the Relative Strength Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Relative Strength Index. (default to 14)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Relative Strength Index. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoRelativeStrengthIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsRsiWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'price_key': opts['priceKey'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoRelativeStrengthIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/rsi', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Relative Strength Index
     * Returns the Relative Strength Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Relative Strength Index. (default to 14)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Relative Strength Index. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoRelativeStrengthIndex}
     */
    this.getCryptoPriceTechnicalsRsi = function(opts) {
      return this.getCryptoPriceTechnicalsRsiWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Simple Moving Average
     * Returns the Simple Moving Average values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Simple Moving Average. (default to 20)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Simple Moving Average. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoSimpleMovingAverage} and HTTP response
     */
    this.getCryptoPriceTechnicalsSmaWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'price_key': opts['priceKey'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoSimpleMovingAverage;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/sma', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Simple Moving Average
     * Returns the Simple Moving Average values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Simple Moving Average. (default to 20)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating Simple Moving Average. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoSimpleMovingAverage}
     */
    this.getCryptoPriceTechnicalsSma = function(opts) {
      return this.getCryptoPriceTechnicalsSmaWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stochastic Oscillator
     * Returns the Stochastic Oscillator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate %K of Stochastic Oscillator. (default to 14)
     * @param {Number} opts.signalPeriod The number of observations, per period, to calculate the %D (the Simple Moving Average of %K) as a signal line for Stochastic Oscillator. (default to 3)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoStochasticOscillator} and HTTP response
     */
    this.getCryptoPriceTechnicalsSrWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'signal_period': opts['signalPeriod'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoStochasticOscillator;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/sr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Stochastic Oscillator
     * Returns the Stochastic Oscillator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate %K of Stochastic Oscillator. (default to 14)
     * @param {Number} opts.signalPeriod The number of observations, per period, to calculate the %D (the Simple Moving Average of %K) as a signal line for Stochastic Oscillator. (default to 3)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoStochasticOscillator}
     */
    this.getCryptoPriceTechnicalsSr = function(opts) {
      return this.getCryptoPriceTechnicalsSrWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Triple Exponential Average
     * Returns the Simple Moving Average values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Exponential Moving Average for Triple Exponential Average. (default to 15)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoTripleExponentialAverage} and HTTP response
     */
    this.getCryptoPriceTechnicalsTrixWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoTripleExponentialAverage;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/trix', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Triple Exponential Average
     * Returns the Simple Moving Average values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Exponential Moving Average for Triple Exponential Average. (default to 15)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoTripleExponentialAverage}
     */
    this.getCryptoPriceTechnicalsTrix = function(opts) {
      return this.getCryptoPriceTechnicalsTrixWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * True Strength Index
     * Returns the True Strength Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.lowPeriod The number of observations, per period, to calculate low period Exponential Moving Average for smoothing in True Strength Index. (default to 13)
     * @param {Number} opts.highPeriod The number of observations, per period, to calculate high period Exponential Moving Average for smoothing in True Strength Index. (default to 25)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating True Strength Index. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoTrueStrengthIndex} and HTTP response
     */
    this.getCryptoPriceTechnicalsTsiWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'low_period': opts['lowPeriod'],
        'high_period': opts['highPeriod'],
        'price_key': opts['priceKey'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoTrueStrengthIndex;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/tsi', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * True Strength Index
     * Returns the True Strength Index values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.lowPeriod The number of observations, per period, to calculate low period Exponential Moving Average for smoothing in True Strength Index. (default to 13)
     * @param {Number} opts.highPeriod The number of observations, per period, to calculate high period Exponential Moving Average for smoothing in True Strength Index. (default to 25)
     * @param {module:model/String} opts.priceKey The Crypto Currency Price field to use when calculating True Strength Index. (default to close)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoTrueStrengthIndex}
     */
    this.getCryptoPriceTechnicalsTsi = function(opts) {
      return this.getCryptoPriceTechnicalsTsiWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Ultimate Oscillator
     * Returns the Ultimate Oscillator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.shortPeriod The number of observations, per period, to calculate the short period for Ultimate Oscillator. (default to 7)
     * @param {Number} opts.mediumPeriod The number of observations, per period, to calculate the medium period for Ultimate Oscillator. (default to 14)
     * @param {Number} opts.longPeriod The number of observations, per period, to calculate the long period for Ultimate Oscillator. (default to 28)
     * @param {Number} opts.shortWeight The weight of short Buying Pressure average for Ultimate Oscillator. (default to 4.0)
     * @param {Number} opts.mediumWeight The weight of medium Buying Pressure average for Ultimate Oscillator. (default to 2.0)
     * @param {Number} opts.longWeight The weight of long Buying Pressure average for Ultimate Oscillator. (default to 1.0)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoUltimateOscillator} and HTTP response
     */
    this.getCryptoPriceTechnicalsUoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'short_period': opts['shortPeriod'],
        'medium_period': opts['mediumPeriod'],
        'long_period': opts['longPeriod'],
        'short_weight': opts['shortWeight'],
        'medium_weight': opts['mediumWeight'],
        'long_weight': opts['longWeight'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoUltimateOscillator;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/uo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Ultimate Oscillator
     * Returns the Ultimate Oscillator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.shortPeriod The number of observations, per period, to calculate the short period for Ultimate Oscillator. (default to 7)
     * @param {Number} opts.mediumPeriod The number of observations, per period, to calculate the medium period for Ultimate Oscillator. (default to 14)
     * @param {Number} opts.longPeriod The number of observations, per period, to calculate the long period for Ultimate Oscillator. (default to 28)
     * @param {Number} opts.shortWeight The weight of short Buying Pressure average for Ultimate Oscillator. (default to 4.0)
     * @param {Number} opts.mediumWeight The weight of medium Buying Pressure average for Ultimate Oscillator. (default to 2.0)
     * @param {Number} opts.longWeight The weight of long Buying Pressure average for Ultimate Oscillator. (default to 1.0)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoUltimateOscillator}
     */
    this.getCryptoPriceTechnicalsUo = function(opts) {
      return this.getCryptoPriceTechnicalsUoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Vortex Indicator
     * Returns the Vortex Indicator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Vortex Indicator. (default to 14)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoVortexIndicator} and HTTP response
     */
    this.getCryptoPriceTechnicalsViWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoVortexIndicator;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/vi', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Vortex Indicator
     * Returns the Vortex Indicator values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to calculate Vortex Indicator. (default to 14)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoVortexIndicator}
     */
    this.getCryptoPriceTechnicalsVi = function(opts) {
      return this.getCryptoPriceTechnicalsViWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Volume-price Trend
     * Returns the Volume-price Trend values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoVolumePriceTrend} and HTTP response
     */
    this.getCryptoPriceTechnicalsVptWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoVolumePriceTrend;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/vpt', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Volume-price Trend
     * Returns the Volume-price Trend values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoVolumePriceTrend}
     */
    this.getCryptoPriceTechnicalsVpt = function(opts) {
      return this.getCryptoPriceTechnicalsVptWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Volume Weighted Average Price
     * Returns the Volume Weighted Average Price values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoVolumeWeightedAveragePrice} and HTTP response
     */
    this.getCryptoPriceTechnicalsVwapWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoVolumeWeightedAveragePrice;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/vwap', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Volume Weighted Average Price
     * Returns the Volume Weighted Average Price values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoVolumeWeightedAveragePrice}
     */
    this.getCryptoPriceTechnicalsVwap = function(opts) {
      return this.getCryptoPriceTechnicalsVwapWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Williams %R
     * Returns the Williams %R values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to look-back when calculating Williams %R. (default to 14)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoWilliamsR} and HTTP response
     */
    this.getCryptoPriceTechnicalsWrWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'period': opts['period'],
        'timeframe': opts['timeframe'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoWilliamsR;

      return this.apiClient.callApi(
        '/crypto/prices/technicals/wr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Williams %R
     * Returns the Williams %R values of Crypto Currency Prices for a Crypto Currency Pair
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return technicals for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return technicals for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return technicals for the given Crypto Currency.
     * @param {Number} opts.period The number of observations, per period, to look-back when calculating Williams %R. (default to 14)
     * @param {module:model/String} opts.timeframe The time interval for the prices when calculating technicals. (default to d1)
     * @param {module:model/String} opts.timezone Return technical date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return technicals on or after this date.
     * @param {String} opts.startTime Return technicals at or after this time (24-hour).
     * @param {Date} opts.endDate Return technicals on or before this date.
     * @param {String} opts.endTime Return technicals at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoWilliamsR}
     */
    this.getCryptoPriceTechnicalsWr = function(opts) {
      return this.getCryptoPriceTechnicalsWrWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Prices
     * Returns a list of available Crypto Currency Prices.
     * @param {module:model/String} timeframe The time interval for the prices.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return prices for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return prices for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return prices for the given Crypto Currency.
     * @param {module:model/String} opts.timezone Return price date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return Crypto Prices on or after this date.
     * @param {String} opts.startTime Return Crypto Prices at or after this time (24-hour).
     * @param {Date} opts.endDate Return Crypto Prices on or before this date.
     * @param {String} opts.endTime Return Crypto Prices at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoPrices} and HTTP response
     */
    this.getCryptoPricesWithHttpInfo = function(timeframe, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'timeframe' is set
      if (timeframe === undefined || timeframe === null) {
        throw new Error("Missing the required parameter 'timeframe' when calling getCryptoPrices");
      }


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'timeframe': timeframe,
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoPrices;

      return this.apiClient.callApi(
        '/crypto/prices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Prices
     * Returns a list of available Crypto Currency Prices.
     * @param {module:model/String} timeframe The time interval for the prices.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return prices for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return prices for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return prices for the given Crypto Currency.
     * @param {module:model/String} opts.timezone Return price date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {Date} opts.startDate Return Crypto Prices on or after this date.
     * @param {String} opts.startTime Return Crypto Prices at or after this time (24-hour).
     * @param {Date} opts.endDate Return Crypto Prices on or before this date.
     * @param {String} opts.endTime Return Crypto Prices at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoPrices}
     */
    this.getCryptoPrices = function(timeframe, opts) {
      return this.getCryptoPricesWithHttpInfo(timeframe, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Snapshot
     * Returns a market snapshot over that last 24 hours for the given currency pair and exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the snapshot for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the snapshot for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the snapshot for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoSnapshot} and HTTP response
     */
    this.getCryptoSnapshotWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoSnapshot;

      return this.apiClient.callApi(
        '/crypto/snapshot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Snapshot
     * Returns a market snapshot over that last 24 hours for the given currency pair and exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the snapshot for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the snapshot for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the snapshot for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoSnapshot}
     */
    this.getCryptoSnapshot = function(opts) {
      return this.getCryptoSnapshotWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Stats
     * Returns available stats on Crypto Currencies.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Returns stats for Crypto Currencies that trade on the specified Crypto Exchange.
     * @param {String} opts.currency Returns stats for the specified Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoStats} and HTTP response
     */
    this.getCryptoStatsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoStats;

      return this.apiClient.callApi(
        '/crypto/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Stats
     * Returns available stats on Crypto Currencies.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Returns stats for Crypto Currencies that trade on the specified Crypto Exchange.
     * @param {String} opts.currency Returns stats for the specified Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoStats}
     */
    this.getCryptoStats = function(opts) {
      return this.getCryptoStatsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
