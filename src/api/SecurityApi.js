/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponseSecurities', 'model/ApiResponseSecurityHistoricalData', 'model/ApiResponseSecurityStockPriceAdjustments', 'model/ApiResponseSecurityStockPrices', 'model/Security', 'model/SecurityScreenGroup', 'model/SecurityScreenResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponseSecurities'), require('../model/ApiResponseSecurityHistoricalData'), require('../model/ApiResponseSecurityStockPriceAdjustments'), require('../model/ApiResponseSecurityStockPrices'), require('../model/Security'), require('../model/SecurityScreenGroup'), require('../model/SecurityScreenResult'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinio) {
      root.intrinio = {};
    }
    root.intrinio.SecurityApi = factory(root.intrinio.ApiClient, root.intrinio.ApiResponseSecurities, root.intrinio.ApiResponseSecurityHistoricalData, root.intrinio.ApiResponseSecurityStockPriceAdjustments, root.intrinio.ApiResponseSecurityStockPrices, root.intrinio.Security, root.intrinio.SecurityScreenGroup, root.intrinio.SecurityScreenResult);
  }
}(this, function(ApiClient, ApiResponseSecurities, ApiResponseSecurityHistoricalData, ApiResponseSecurityStockPriceAdjustments, ApiResponseSecurityStockPrices, Security, SecurityScreenGroup, SecurityScreenResult) {
  'use strict';

  /**
   * Security service.
   * @module api/SecurityApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SecurityApi. 
   * @alias module:api/SecurityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get All Securiites
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurities} and HTTP response
     */
    this.getAllSecuritiesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurities;

      return this.apiClient.callApi(
        '/securities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get All Securiites
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurities}
     */
    this.getAllSecurities = function(opts) {
      return this.getAllSecuritiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Security by ID
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Security} and HTTP response
     */
    this.getSecurityByIdWithHttpInfo = function(identifier) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityById");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Security;

      return this.apiClient.callApi(
        '/securities/{identifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a Security by ID
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Security}
     */
    this.getSecurityById = function(identifier) {
      return this.getSecurityByIdWithHttpInfo(identifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Security Data Point (Number)
     * Returns a numeric value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code-name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.getSecurityDataPointNumberWithHttpInfo = function(identifier, tag) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityDataPointNumber");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getSecurityDataPointNumber");
      }


      var pathParams = {
        'identifier': identifier,
        'tag': tag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['text/plain; charset=utf-8'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/securities/{identifier}/data_point/{tag}/number', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Security Data Point (Number)
     * Returns a numeric value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code-name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.getSecurityDataPointNumber = function(identifier, tag) {
      return this.getSecurityDataPointNumberWithHttpInfo(identifier, tag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Security Data Point (Text)
     * Returns a text value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code-name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.getSecurityDataPointTextWithHttpInfo = function(identifier, tag) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityDataPointText");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getSecurityDataPointText");
      }


      var pathParams = {
        'identifier': identifier,
        'tag': tag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['text/plain; charset=utf-8'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/securities/{identifier}/data_point/{tag}/text', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Security Data Point (Text)
     * Returns a text value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code-name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.getSecurityDataPointText = function(identifier, tag) {
      return this.getSecurityDataPointTextWithHttpInfo(identifier, tag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Security Historical Data
     * Returns historical values for the given &#x60;tag&#x60; and the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code-name
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical date on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityHistoricalData} and HTTP response
     */
    this.getSecurityHistoricalDataWithHttpInfo = function(identifier, tag, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityHistoricalData");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getSecurityHistoricalData");
      }


      var pathParams = {
        'identifier': identifier,
        'tag': tag
      };
      var queryParams = {
        'type': opts['type'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'sort_order': opts['sortOrder'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityHistoricalData;

      return this.apiClient.callApi(
        '/securities/{identifier}/historical_data/{tag}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Security Historical Data
     * Returns historical values for the given &#x60;tag&#x60; and the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {String} tag An Intrinio data tag ID or code-name
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Filter by type, when applicable
     * @param {Date} opts.startDate Get historical data on or after this date
     * @param {Date} opts.endDate Get historical date on or before this date
     * @param {module:model/String} opts.sortOrder Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityHistoricalData}
     */
    this.getSecurityHistoricalData = function(identifier, tag, opts) {
      return this.getSecurityHistoricalDataWithHttpInfo(identifier, tag, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Stock Price Adjustments for Security
     * Return stock price adjustments for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Return price adjustments on or after the date
     * @param {Date} opts.endDate Return price adjustments on or before the date
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityStockPriceAdjustments} and HTTP response
     */
    this.getSecurityStockPriceAdjustmentsWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityStockPriceAdjustments");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityStockPriceAdjustments;

      return this.apiClient.callApi(
        '/securities/{identifier}/prices/adjustments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Stock Price Adjustments for Security
     * Return stock price adjustments for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Return price adjustments on or after the date
     * @param {Date} opts.endDate Return price adjustments on or before the date
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityStockPriceAdjustments}
     */
    this.getSecurityStockPriceAdjustments = function(identifier, opts) {
      return this.getSecurityStockPriceAdjustmentsWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Stock Prices for Security
     * Return stock prices for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Return prices on or after the date
     * @param {Date} opts.endDate Return prices on or before the date
     * @param {module:model/String} opts.frequency Return stock prices in the given frequency (default to daily)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurityStockPrices} and HTTP response
     */
    this.getSecurityStockPricesWithHttpInfo = function(identifier, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecurityStockPrices");
      }


      var pathParams = {
        'identifier': identifier
      };
      var queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'frequency': opts['frequency'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurityStockPrices;

      return this.apiClient.callApi(
        '/securities/{identifier}/prices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Stock Prices for Security
     * Return stock prices for the Security with the given &#x60;identifier&#x60;
     * @param {String} identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Return prices on or after the date
     * @param {Date} opts.endDate Return prices on or before the date
     * @param {module:model/String} opts.frequency Return stock prices in the given frequency (default to daily)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurityStockPrices}
     */
    this.getSecurityStockPrices = function(identifier, opts) {
      return this.getSecurityStockPricesWithHttpInfo(identifier, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Screen Securities
     * Screen securities using complex logic
     * @param {Object} opts Optional parameters
     * @param {module:model/SecurityScreenGroup} opts.logic The logic to screen with, consisting of operators, clauses, and nested groups.&lt;br/&gt; See &lt;a href&#x3D;\&quot;/documentation/screener_v2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;screener documentation&lt;/a&gt; for details on how to construct conditions.
     * @param {String} opts.orderColumn Results returned sorted by this column
     * @param {module:model/String} opts.orderDirection Sort order to use with the order_column (default to asc)
     * @param {Boolean} opts.primaryOnly Return only primary securities (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SecurityScreenResult>} and HTTP response
     */
    this.screenSecuritiesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['logic'];


      var pathParams = {
      };
      var queryParams = {
        'order_column': opts['orderColumn'],
        'order_direction': opts['orderDirection'],
        'primary_only': opts['primaryOnly'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SecurityScreenResult];

      return this.apiClient.callApi(
        '/securities/screen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Screen Securities
     * Screen securities using complex logic
     * @param {Object} opts Optional parameters
     * @param {module:model/SecurityScreenGroup} opts.logic The logic to screen with, consisting of operators, clauses, and nested groups.&lt;br/&gt; See &lt;a href&#x3D;\&quot;/documentation/screener_v2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;screener documentation&lt;/a&gt; for details on how to construct conditions.
     * @param {String} opts.orderColumn Results returned sorted by this column
     * @param {module:model/String} opts.orderDirection Sort order to use with the order_column (default to asc)
     * @param {Boolean} opts.primaryOnly Return only primary securities (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SecurityScreenResult>}
     */
    this.screenSecurities = function(opts) {
      return this.screenSecuritiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Securities
     * Searches for Securities matching the text &#x60;query&#x60;
     * @param {String} query 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseSecurities} and HTTP response
     */
    this.searchSecuritiesWithHttpInfo = function(query) {
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchSecurities");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseSecurities;

      return this.apiClient.callApi(
        '/securities/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search Securities
     * Searches for Securities matching the text &#x60;query&#x60;
     * @param {String} query 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseSecurities}
     */
    this.searchSecurities = function(query) {
      return this.searchSecuritiesWithHttpInfo(query)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
